============================================
Include Statements
============================================

PROGRAM TEST
  INCLUDE 'fftw.f03'
  a = 1.0
  INCLUDE 'debug_point.f03'
END PROGRAM

----

(translation_unit
  (program_block (identifier)
    (include_statement (filename))
    (assignment_expression (identifier) (number_literal))
    (include_statement (filename))))

============================================
Use Statements
============================================

PROGRAM TEST
  USE ISO_C_BINDING
  USE ISO_FORTRAN_ENV, ONLY : ERROR_UNIT, OUTPUT_UNIT
  USE MY_MODULE, ONLY:FUNC1
END PROGRAM

----

(translation_unit
  (program_block (identifier)
    (use_statement (module_name))
    (use_statement (module_name)
      (included_items (identifier) (identifier)))
    (use_statement (module_name)
      (included_items (identifier)))))

============================================
Intrinsic Variable Declarations
============================================

PROGRAM TEST
  INTEGER, PARAMETER :: N = 100, MXLN = 255
  INTEGER :: i, j, k, l(*)
  REAL(16) :: data(0:N**2), rhs(N)
  REAL*8, TARGET :: tmp
  REAL(KIND=8), POINTER :: nxt => tmp
  LOGICAL, DIMENSION(:), ALLOCATABLE :: mask
  CHARACTER(LEN=:) :: message
  CHARACTER(LEN=*) :: options
  CHARACTER*(MXLN) :: errflag
END PROGRAM

----

(translation_unit
  (program_block (identifier)
    (variable_declaration (intrinsic_type) (type_qualifier)
      (assignment_expression (identifier) (number_literal))
      (assignment_expression (identifier) (number_literal)))
    (variable_declaration (intrinsic_type)
      (identifier)
      (identifier)
      (identifier)
      (call_expression (identifier) (argument_list (assumed_size))))
    (variable_declaration (intrinsic_type) (size (argument_list (number_literal)))
      (call_expression (identifier)
        (argument_list
          (array_slice (number_literal) (math_expression (identifier) (number_literal)))))
      (call_expression (identifier) (argument_list (identifier))))
    (variable_declaration (intrinsic_type) (size) (type_qualifier) (identifier))
    (variable_declaration
      (intrinsic_type) (size (argument_list (keyword_argument (identifier) (number_literal))))
      (type_qualifier)
      (pointer_assignment_expression (identifier) (identifier)))
    (variable_declaration
      (intrinsic_type)
      (type_qualifier (argument_list (array_slice)))
      (type_qualifier) (identifier))
    (variable_declaration
      (intrinsic_type)
        (size (argument_list (keyword_argument (identifier) (assumed_shape))))
      (identifier))
    (variable_declaration
      (intrinsic_type)
      (size (argument_list (keyword_argument (identifier) (assumed_size))))
      (identifier))
    (variable_declaration
      (intrinsic_type) (size (parenthesized_expression (identifier)))
      (identifier))))

============================================
Variable Modification Statements
============================================

PROGRAM TEST
  ALLOCATABLE :: i
  DIMENSION i(:, :), r(10)
  TARGET :: i
  PARAMETER (MAXLEN = 255, PI = 3.1415, SCALE_FACTOR = SIN(2 * PI))
  EQUIVALENCE (a, b, c), (d, e, f, r(1))
END PROGRAM

----

(translation_unit
  (program_block (identifier)
    (variable_modification (type_qualifier) (identifier))
    (variable_modification (type_qualifier)
      (call_expression (identifier) (argument_list (array_slice) (array_slice)))
      (call_expression (identifier) (argument_list (number_literal))))
    (variable_modification (type_qualifier) (identifier))
    (parameter_statement
      (parameter_assignment (identifier) (number_literal))
      (parameter_assignment (identifier) (number_literal))
      (parameter_assignment (identifier)
        (call_expression (identifier)
          (argument_list (math_expression (number_literal) (identifier))))))
    (equivalence_statement
      (equivalence_set (identifier) (identifier) (identifier))
      (equivalence_set
        (identifier)
        (identifier)
        (identifier)
        (call_expression (identifier) (argument_list (number_literal)))))))

============================================
Do Loops
============================================

PROGRAM TEST
    DO i = 1, 10
      x = 6**x
      OPEN(i, FILE="qwerty")
      CALL MYSUB(i, TEST=.TRUE.)
    END DO

    DO i = 1, UBOUND(arr), step
      CONTINUE
      GOTO 44
    ENDDO

    out44: DO i = 1,INT(SIN(9.0*i))
      DO j = 1, 100, -1
        CYCLE out44
      END DO
    END DO out44
END PROGRAM

----

(translation_unit
  (program_block (identifier)
    (do_loop_statement
      (loop_control_expression (identifier) (number_literal) (number_literal))
      (assignment_expression
        (identifier)
        (math_expression (number_literal) (identifier)))
      (call_expression (identifier)
        (argument_list
          (identifier)
          (keyword_argument (identifier) (string_literal))))
      (subroutine_call
        (call_expression (identifier)
          (argument_list
            (identifier)
            (keyword_argument (identifier) (boolean_literal))))))
    (do_loop_statement
      (loop_control_expression
        (identifier)
        (number_literal)
        (call_expression (identifier) (argument_list (identifier)))
        (identifier))
      (keyword_statement)
      (keyword_statement (statement_label)))
    (do_loop_statement
      (block_label_start_expression)
      (loop_control_expression
        (identifier)
        (number_literal)
        (call_expression
          (identifier)
          (argument_list
            (call_expression (identifier)
              (argument_list
                (math_expression (number_literal) (identifier)))))))
      (do_loop_statement
        (loop_control_expression
          (identifier)
          (number_literal)
          (number_literal)
          (number_literal))
        (keyword_statement (identifier)))
      (block_label))))

============================================
If Statements
============================================

PROGRAM TEST
  IF (x<7) y = 9

  IF (arg(1:1) == ADJUSTL(' r')) THEN
    r = 0
  ELSE IF (arg(1:1) .NE. CHAR(l(1))) THEN
    l = 67
  ELSE IF (arg(1:1) .NE. CHAR(m(1))) THEN
  ELSE
    n = 0
  ENDIF

  cond1: IF (y < 0) THEN
     y = 9
  ELSE  IF (x > 0) THEN cond1
   r = 9
   IF (arg(1:1)) THEN
     r = 0
   ELSE
     n = 0
   END IF
  ELSE cond1
    y = 10
  END IF cond1
END PROGRAM

----

(translation_unit
  (program_block (identifier)
    (if_statement
      (parenthesized_expression (relational_expression (identifier) (number_literal)))
      (assignment_expression (identifier) (number_literal)))
    (if_statement
      (parenthesized_expression
        (relational_expression
          (call_expression (identifier)
            (argument_list (array_slice (number_literal) (number_literal))))
          (call_expression (identifier)
            (argument_list (string_literal)))))
      (assignment_expression (identifier) (number_literal))
      (elseif_clause
        (parenthesized_expression
          (relational_expression
            (call_expression (identifier)
              (argument_list (array_slice (number_literal) (number_literal))))
            (call_expression (identifier)
              (argument_list
                (call_expression (identifier)
                  (argument_list (number_literal)))))))
        (assignment_expression (identifier) (number_literal)))
      (elseif_clause
        (parenthesized_expression
          (relational_expression
            (call_expression (identifier)
              (argument_list (array_slice (number_literal) (number_literal))))
            (call_expression (identifier)
              (argument_list
                (call_expression (identifier) (argument_list (number_literal))))))))
      (else_clause
        (assignment_expression (identifier) (number_literal))))
    (if_statement
      (block_label_start_expression)
      (parenthesized_expression
        (relational_expression (identifier) (number_literal)))
      (assignment_expression (identifier) (number_literal))
      (elseif_clause
        (parenthesized_expression
          (relational_expression (identifier) (number_literal)))
        (block_label)
        (assignment_expression (identifier) (number_literal))
        (if_statement
          (parenthesized_expression
            (call_expression (identifier)
              (argument_list (array_slice (number_literal) (number_literal)))))
          (assignment_expression (identifier) (number_literal))
          (else_clause
            (assignment_expression (identifier) (number_literal)))))
      (else_clause (block_label)
        (assignment_expression (identifier) (number_literal)))
      (block_label))))
