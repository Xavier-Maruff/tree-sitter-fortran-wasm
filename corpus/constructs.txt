============================================
Program
============================================

PROGRAM TEST
END PROGRAM

PROGRAM TEST
END PROGRAM TEST

----

(translation_unit
  (program_block (identifier))
  (program_block (identifier) (identifier)))

============================================
Subroutine
============================================

pure recursive subroutine static_method(arg)
   integer, intent(in) :: arg
   REAL(8), SAVE :: counter
   counter = counter + arg
end subroutine static_method


SUBROUTINE WITH_INTERNAL_PROC
  integer :: cmd_stat

  CALL CHECK_RETURN_VAL("ls *", cmd_stat)

  CONTAINS
    SUBROUTINE CHECK_RETURN_VAL(cmd, istat)
      integer, intent(out) :: istat
      character(*), intent(in) :: cmd
      istat = SYSTEM(cmd)
      RETURN
    END SUBROUTINE
END SUBROUTINE

----

(translation_unit
  (subroutine
    (subroutine_statement
      (procedure_qualifier)
      (procedure_qualifier)
      (name)
      (parameters (identifier)))
    (variable_declaration (intrinsic_type) (type_qualifier) (identifier))
    (variable_declaration
      (intrinsic_type) (size (argument_list (number_literal))) (type_qualifier) (identifier))
    (assignment_statement
      (identifier) (math_expression (identifier) (identifier)))
    (identifier))
  (subroutine (subroutine_statement (name))
    (variable_declaration (intrinsic_type) (identifier))
    (subroutine_call (name) (argument_list (string_literal) (identifier)))
    (internal_procedures
      (contains_statement)
      (subroutine
        (subroutine_statement (name) (parameters (identifier) (identifier)))
        (variable_declaration (intrinsic_type) (type_qualifier) (identifier))
        (variable_declaration
          (intrinsic_type) (size (argument_list (assumed_size)))
          (type_qualifier)
          (identifier))
        (assignment_statement (identifier)
          (call_expression (identifier) (argument_list (identifier))))
        (keyword_statement)))))


============================================
Functions (simple)
============================================

real(8) function current_time()
  ! returns the wall clock time in seconds.
  use mpi
  current_time = mpi_wtime()
end function

type(object) function new_object
  ! returns the current date string
  TYPE(object) :: obj
  obj%counter = 0
  new_object = obj
end function

----

(translation_unit
  (function
    (function_statement
      (intrinsic_type) (size (argument_list (number_literal)))
      (name))
    (comment)
    (use_statement (module_name))
    (assignment_statement (identifier) (call_expression (identifier) (argument_list))))
  (function
    (function_statement (derived_type (type_name))
      (name))
    (comment)
    (variable_declaration (derived_type (type_name)) (identifier))
    (assignment_statement
      (derived_type_member_expression (identifier) (identifier))
      (number_literal))
    (assignment_statement (identifier) (identifier))))


============================================
Functions (complex)
============================================

pure elemental logical function test(x, y) result(value)
  REAL(8) :: x, y
  logical :: value = (x == y)

contains

  real function internal_proc result(x)
    real(8) x = 1.0
  end function

  subroutine increment(i)
    integer :: i
    i = i + 1
  end subroutine

end function test

----

(translation_unit
  (function
    (function_statement
      (procedure_qualifier)
      (procedure_qualifier)
      (intrinsic_type)
      (name)
      (parameters (identifier) (identifier))
      (function_result (identifier)))
    (variable_declaration
      (intrinsic_type) (size (argument_list  (number_literal)))
      (identifier)
      (identifier))
    (variable_declaration
      (intrinsic_type)
      (assignment_statement
        (identifier)
        (parenthesized_expression  (relational_expression (identifier) (identifier)))))
    (internal_procedures
      (contains_statement)
      (function
        (function_statement
          (intrinsic_type)
          (name)
          (function_result (identifier)))
        (variable_declaration
          (intrinsic_type) (size (argument_list (number_literal)))
          (assignment_statement (identifier) (number_literal))))
      (subroutine
        (subroutine_statement (name) (parameters (identifier)))
        (variable_declaration (intrinsic_type) (identifier))
        (assignment_statement
          (identifier)
          (math_expression (identifier) (number_literal)))))
    (identifier)))

============================================
Derived Type Variable Declarations
============================================

PROGRAM TEST
  TYPE, PUBLIC :: CUSTOM_TYPE
    SEQUENCE
    REAL(8) :: X,Y,Z
    INTEGER :: W,H,L
    REAL(EB), ALLOCATABLE, DIMENSION(:, :, :) :: VALS
  END TYPE CUSTOM_TYPE
END PROGRAM

----

(translation_unit
  (program_block (identifier)
    (derived_type_definition (derived_type_statement (type_qualifier) (type_name))
      (sequence_statement)
      (variable_declaration (intrinsic_type) (size (argument_list (number_literal)))
        (identifier)
        (identifier)
        (identifier))
      (variable_declaration (intrinsic_type)
        (identifier)
        (identifier)
        (identifier))
      (variable_declaration
        (intrinsic_type) (size (argument_list (identifier)))
        (type_qualifier)
        (type_qualifier
          (argument_list (extent_specifier) (extent_specifier) (extent_specifier)))
        (identifier))
      (identifier))))
